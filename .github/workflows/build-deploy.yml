name: URL SHORTNER BuildRelease
on:
  push:
    branches: [ feat/url-shortner ]
    paths: 
    - "url-shortner/**"
    - ".github/workflows/build-deploy.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: url-shortner
  IMAGE_TAG: ${{ github.sha }}

jobs:
  lambdaBuildTest:
    name: Project Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19'

      - name: Install dependencies
        working-directory: ./url-shortner
        run: |
          rm -rf package-lock.json
          npm install --unsafe-perm --ignore-scripts --force

      - name: Build Typescript
        working-directory: ./url-shortner
        run: |
          rm -rf dist
          mkdir dist
          npm run build --if-present
      
  lambdaImageBuildPush:
    name: Image Build
    needs: [ lambdaBuildTest ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-url-shortner-${{ hashFiles('./url-shortner/package.json') }}
          restore-keys: |
            ${{ runner.os }}-url-shortner

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      # Create repository if it doesn't exist
      - name: Create ECR
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION \
            || aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

      - name: Generate docker tags
        id: gen_tags
        run: |
          IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
          TAGS="${IMAGE_NAME}:${{ env.IMAGE_TAG }}"
          TAGS="$TAGS,${IMAGE_NAME}:latest-dev"
          echo ::set-output name=tags::$TAGS


      - name: Build & Push image
        uses: docker/build-push-action@v4
        with:
          context: ./url-shortner
          builder: ${{ steps.buildx.outputs.name }}
          file: ./url-shortner/Dockerfile
          tags: ${{ steps.gen_tags.outputs.tags }}

          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new


  deployCDK:
    needs: [ lambdaImageBuildPush ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
